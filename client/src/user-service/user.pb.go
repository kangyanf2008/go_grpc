// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package user_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseUser struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Telphones            []string `protobuf:"bytes,3,rep,name=telphones,proto3" json:"telphones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseUser) Reset()         { *m = ResponseUser{} }
func (m *ResponseUser) String() string { return proto.CompactTextString(m) }
func (*ResponseUser) ProtoMessage()    {}
func (*ResponseUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *ResponseUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseUser.Unmarshal(m, b)
}
func (m *ResponseUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseUser.Marshal(b, m, deterministic)
}
func (m *ResponseUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUser.Merge(m, src)
}
func (m *ResponseUser) XXX_Size() int {
	return xxx_messageInfo_ResponseUser.Size(m)
}
func (m *ResponseUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUser.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUser proto.InternalMessageInfo

func (m *ResponseUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ResponseUser) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *ResponseUser) GetTelphones() []string {
	if m != nil {
		return m.Telphones
	}
	return nil
}

type RequestUser struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestUser) Reset()         { *m = RequestUser{} }
func (m *RequestUser) String() string { return proto.CompactTextString(m) }
func (*RequestUser) ProtoMessage()    {}
func (*RequestUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *RequestUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestUser.Unmarshal(m, b)
}
func (m *RequestUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestUser.Marshal(b, m, deterministic)
}
func (m *RequestUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUser.Merge(m, src)
}
func (m *RequestUser) XXX_Size() int {
	return xxx_messageInfo_RequestUser.Size(m)
}
func (m *RequestUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUser.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUser proto.InternalMessageInfo

func (m *RequestUser) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*ResponseUser)(nil), "user.response_user")
	proto.RegisterType((*RequestUser)(nil), "user.request_user")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xa2, 0xb9, 0x78, 0x8b, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0xe3, 0x41, 0x02, 0x42, 0x52, 0x5c, 0x1c, 0x20, 0x3a, 0x2f,
	0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xce, 0x17, 0x12, 0xe0, 0x62, 0x4e,
	0x4c, 0x4f, 0x95, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x85, 0x64, 0xb8, 0x38, 0x4b,
	0x52, 0x73, 0x0a, 0x32, 0xf2, 0xf3, 0x52, 0x8b, 0x25, 0x98, 0x15, 0x98, 0x35, 0x38, 0x83, 0x10,
	0x02, 0x4a, 0x0a, 0x5c, 0x3c, 0x45, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x10, 0xb3, 0x05, 0xb8,
	0x98, 0x4b, 0x33, 0x53, 0xa0, 0xc6, 0x82, 0x98, 0x46, 0xad, 0x8c, 0x5c, 0x3c, 0x20, 0xa9, 0xf8,
	0xe2, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x73, 0x2e, 0xae, 0xc2, 0xd2, 0xd4, 0xa2, 0x4a,
	0x88, 0x06, 0x21, 0x3d, 0xb0, 0x83, 0x91, 0x0d, 0x91, 0x12, 0x86, 0x89, 0x21, 0xb9, 0x5a, 0x89,
	0x41, 0xc8, 0x86, 0x8b, 0xbb, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x97, 0x54, 0x9d, 0x1a, 0x8c, 0x06,
	0x8c, 0x49, 0x6c, 0xe0, 0x30, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x66, 0xde, 0xfd, 0xaf,
	0x21, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	QueryUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUser, error)
	StreamUser(ctx context.Context, opts ...grpc.CallOption) (UserService_StreamUserClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) QueryUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/user.user_service/query_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StreamUser(ctx context.Context, opts ...grpc.CallOption) (UserService_StreamUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/user.user_service/stream_user", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceStreamUserClient{stream}
	return x, nil
}

type UserService_StreamUserClient interface {
	Send(*RequestUser) error
	Recv() (*ResponseUser, error)
	grpc.ClientStream
}

type userServiceStreamUserClient struct {
	grpc.ClientStream
}

func (x *userServiceStreamUserClient) Send(m *RequestUser) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceStreamUserClient) Recv() (*ResponseUser, error) {
	m := new(ResponseUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	QueryUser(context.Context, *RequestUser) (*ResponseUser, error)
	StreamUser(UserService_StreamUserServer) error
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) QueryUser(ctx context.Context, req *RequestUser) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUser not implemented")
}
func (*UnimplementedUserServiceServer) StreamUser(srv UserService_StreamUserServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUser not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user_service/QueryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StreamUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).StreamUser(&userServiceStreamUserServer{stream})
}

type UserService_StreamUserServer interface {
	Send(*ResponseUser) error
	Recv() (*RequestUser, error)
	grpc.ServerStream
}

type userServiceStreamUserServer struct {
	grpc.ServerStream
}

func (x *userServiceStreamUserServer) Send(m *ResponseUser) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceStreamUserServer) Recv() (*RequestUser, error) {
	m := new(RequestUser)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.user_service",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query_user",
			Handler:    _UserService_QueryUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_user",
			Handler:       _UserService_StreamUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
